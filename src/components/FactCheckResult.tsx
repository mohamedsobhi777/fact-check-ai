'use client';

import { jsPDF } from 'jspdf';

interface FactCheckResultProps {
  claim: string;
  verdict: string;
  explanation: string;
  sources: { url: string; snippet: string }[];
  articleTitle?: string;
  sourceUrl?: string;
}

export default function FactCheckResult({ claim, verdict, explanation, sources, articleTitle, sourceUrl }: FactCheckResultProps) {
  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(24);
    doc.setTextColor(99, 102, 241); // Indigo color
    doc.text('FactCheckAI Report', 20, 30);
    
    // Add line under header
    doc.setDrawColor(99, 102, 241);
    doc.setLineWidth(2);
    doc.line(20, 35, 190, 35);
    
    let currentY = 55;
    
    // Article Title (if exists)
    if (articleTitle) {
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text('Article:', 20, currentY);
      currentY += 10;
      
      doc.setFontSize(12);
      doc.setTextColor(60, 60, 60);
      const titleLines = doc.splitTextToSize(articleTitle, 160);
      doc.text(titleLines, 20, currentY);
      currentY += titleLines.length * 7 + 10;
      
      if (sourceUrl) {
        doc.setTextColor(99, 102, 241);
        const urlLines = doc.splitTextToSize(sourceUrl, 160);
        doc.text(urlLines, 20, currentY);
        currentY += urlLines.length * 7 + 15;
      }
    } else {
      // Claim
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text('Claim:', 20, currentY);
      currentY += 10;
      
      doc.setFontSize(12);
      doc.setTextColor(60, 60, 60);
      const claimLines = doc.splitTextToSize(claim, 160);
      doc.text(claimLines, 20, currentY);
      currentY += claimLines.length * 7 + 15;
    }
    
    // Verdict
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Verdict:', 20, currentY);
    currentY += 12;
    
    doc.setFontSize(14);
    const verdictColor = getVerdictColorForPDF(verdict);
    doc.setTextColor(verdictColor.r, verdictColor.g, verdictColor.b);
    doc.text(verdict.toUpperCase(), 20, currentY);
    currentY += 20;
    
    // Explanation
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Explanation:', 20, currentY);
    currentY += 12;
    
    doc.setFontSize(11);
    doc.setTextColor(40, 40, 40);
    const explanationLines = doc.splitTextToSize(explanation, 160);
    doc.text(explanationLines, 20, currentY);
    currentY += explanationLines.length * 6 + 20;
    
    // Sources
    if (sources.length > 0) {
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text('Sources:', 20, currentY);
      currentY += 15;
      
      sources.forEach((source, i) => {
        if (currentY > 260) {
          doc.addPage();
          currentY = 30;
        }
        
        doc.setFontSize(11);
        doc.setTextColor(60, 60, 60);
        doc.text(`${i + 1}.`, 20, currentY);
        
        const snippetLines = doc.splitTextToSize(source.snippet, 150);
        doc.text(snippetLines, 30, currentY);
        currentY += snippetLines.length * 6 + 5;
        
        if (source.url) {
          doc.setTextColor(99, 102, 241);
          doc.setFontSize(10);
          const urlLines = doc.splitTextToSize(source.url, 150);
          doc.text(urlLines, 30, currentY);
          currentY += urlLines.length * 5 + 8;
        }
      });
    }
    
    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(`Generated by FactCheckAI - Page ${i} of ${pageCount}`, 20, 285);
      doc.text(new Date().toLocaleDateString(), 150, 285);
    }
    
    doc.save(`FactCheckAI_Report_${new Date().getTime()}.pdf`);
  };

  const getVerdictColorForPDF = (verdict: string) => {
    switch (verdict.toLowerCase()) {
      case 'true':
        return { r: 34, g: 197, b: 94 }; // Green
      case 'false':
        return { r: 239, g: 68, b: 68 }; // Red  
      case 'misleading':
        return { r: 245, g: 158, b: 11 }; // Orange
      case 'mixed':
        return { r: 168, g: 85, b: 247 }; // Purple
      default:
        return { r: 107, g: 114, b: 128 }; // Gray
    }
  };

  const getVerdictStyles = (verdict: string) => {
    switch (verdict.toLowerCase()) {
      case 'true':
        return {
          container: 'bg-gradient-to-r from-emerald-500/10 to-green-500/10 border-emerald-300 text-emerald-800',
          badge: 'bg-gradient-to-r from-emerald-500 to-green-500',
          icon: (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          )
        };
      case 'false':
        return {
          container: 'bg-gradient-to-r from-red-500/10 to-pink-500/10 border-red-300 text-red-800',
          badge: 'bg-gradient-to-r from-red-500 to-pink-500',
          icon: (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          )
        };
      case 'misleading':
        return {
          container: 'bg-gradient-to-r from-orange-500/10 to-yellow-500/10 border-orange-300 text-orange-800',
          badge: 'bg-gradient-to-r from-orange-500 to-yellow-500',
          icon: (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          )
        };
      case 'mixed':
        return {
          container: 'bg-gradient-to-r from-purple-500/10 to-indigo-500/10 border-purple-300 text-purple-800',
          badge: 'bg-gradient-to-r from-purple-500 to-indigo-500',
          icon: (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
          )
        };
      default:
        return {
          container: 'bg-gradient-to-r from-gray-500/10 to-slate-500/10 border-gray-300 text-gray-800',
          badge: 'bg-gradient-to-r from-gray-500 to-slate-500',
          icon: (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          )
        };
    }
  };

  const verdictStyles = getVerdictStyles(verdict);

  return (
    <div className="mt-12 max-w-4xl mx-auto">
      <div className="bg-white/10 backdrop-blur-lg border border-white/20 rounded-3xl shadow-2xl overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-indigo-600/20 to-purple-600/20 px-8 py-6 border-b border-white/10">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div>
              <h2 className="text-2xl font-bold text-white">Fact Check Results</h2>
              <p className="text-indigo-200">AI-powered verification complete</p>
            </div>
          </div>
        </div>

        <div className="p-8 space-y-8">
          {/* Article/Claim Section */}
          {articleTitle ? (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 011 .22l4 2a2 2 0 011 1.78v10a2 2 0 01-2 2z" />
                </svg>
                Article Analyzed
              </h3>
              <div className="bg-white/5 rounded-xl p-6 border border-white/10">
                <h4 className="text-white font-medium text-lg mb-3">{articleTitle}</h4>
                {sourceUrl && (
                  <a 
                    href={sourceUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-indigo-300 hover:text-indigo-200 underline text-sm break-all"
                  >
                    {sourceUrl}
                  </a>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                Claim Analyzed
              </h3>
              <div className="bg-white/5 rounded-xl p-6 border border-white/10">
                <p className="text-gray-200 leading-relaxed">{claim}</p>
              </div>
            </div>
          )}

          {/* Verdict Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-white">Verdict</h3>
            <div className={`p-6 rounded-2xl border-2 ${verdictStyles.container}`}>
              <div className="flex items-center gap-4">
                <div className={`w-16 h-16 ${verdictStyles.badge} rounded-xl flex items-center justify-center text-white shadow-lg`}>
                  {verdictStyles.icon}
                </div>
                <div>
                  <div className="text-3xl font-bold">{verdict.toUpperCase()}</div>
                  <p className="text-sm opacity-80 mt-1">
                    {verdict.toLowerCase() === 'true' && 'This claim is factually correct'}
                    {verdict.toLowerCase() === 'false' && 'This claim is factually incorrect'}
                    {verdict.toLowerCase() === 'misleading' && 'This claim contains misleading information'}
                    {verdict.toLowerCase() === 'mixed' && 'This claim has both true and false elements'}
                    {!['true', 'false', 'misleading', 'mixed'].includes(verdict.toLowerCase()) && 'Unable to determine accuracy'}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Explanation Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Detailed Analysis
            </h3>
            <div className="bg-white/5 rounded-xl p-6 border border-white/10">
              <p className="text-gray-200 leading-relaxed text-lg">{explanation}</p>
            </div>
          </div>

          {/* Sources Section */}
          {sources.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>
                Reliable Sources
              </h3>
              <div className="grid gap-4">
                {sources.map((source, index) => (
                  <div key={index} className="bg-white/5 rounded-xl p-6 border border-white/10 hover:bg-white/10 transition-all group">
                    <div className="flex items-start gap-4">
                      <div className="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-semibold text-sm flex-shrink-0">
                        {index + 1}
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-gray-200 mb-2 leading-relaxed">{source.snippet}</p>
                        {source.url && (
                          <a 
                            href={source.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-indigo-300 hover:text-indigo-200 underline text-sm break-all group-hover:text-indigo-100 transition-colors"
                          >
                            {source.url}
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* PDF Download Button */}
          <div className="flex justify-center pt-4">
            <button
              onClick={generatePDF}
              className="group bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-xl hover:shadow-2xl flex items-center gap-3"
            >
              <svg className="w-6 h-6 group-hover:animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Download PDF Report
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}